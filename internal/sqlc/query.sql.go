// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
 INSERT INTO platforms(platforms_id, uri_template)
 VALUES ($1, $2)
 RETURNING platforms_id, name, uri_template
`

type CreateAuthorParams struct {
	PlatformsID int32
	UriTemplate string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Platform, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.PlatformsID, arg.UriTemplate)
	var i Platform
	err := row.Scan(&i.PlatformsID, &i.Name, &i.UriTemplate)
	return i, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO Groups (groups_id, name, website)
VALUES ($1, $2, $3)
RETURNING groups_id, name, website
`

type CreateGroupParams struct {
	GroupsID int32
	Name     string
	Website  sql.NullString
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupsID, arg.Name, arg.Website)
	var i Group
	err := row.Scan(&i.GroupsID, &i.Name, &i.Website)
	return i, err
}
